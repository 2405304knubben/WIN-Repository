@model KE03_INTDEV_SE_2_Base.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="dashboard">
    <div class="date-filter mb-4">
        <div class="form-row">
            <div class="col-md-3">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-3">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-2 align-self-end">
                <button id="updateStats" class="btn btn-primary">Update</button>
            </div>
            <div class="col-md-4 align-self-end">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-secondary" data-period="7">Week</button>
                    <button type="button" class="btn btn-secondary" data-period="30">Month</button>
                    <button type="button" class="btn btn-secondary" data-period="365">Year</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card stats-card">
                <div class="card-body">
                    <h5 class="card-title">Total Orders</h5>
                    <p class="card-text" id="totalOrders">@Model.TotalOrders</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card">
                <div class="card-body">
                    <h5 class="card-title">Total Revenue</h5>
                    <p class="card-text" id="totalRevenue">€@Model.TotalRevenue.ToString("N2")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card">
                <div class="card-body">
                    <h5 class="card-title">New Customers</h5>
                    <p class="card-text" id="newCustomers">@Model.NewCustomers</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Daily Orders</h5>
                    <canvas id="ordersChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Daily Revenue</h5>
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let ordersChart;
        let revenueChart;

        // Parse the model data for charts
        const orderData = @Html.Raw(Json.Serialize(Model.DailyOrderCounts.Select(x => new { date = x.Date.ToString("yyyy-MM-dd"), count = x.Count })));
        const revenueData = @Html.Raw(Json.Serialize(Model.DailyRevenue.Select(x => new { date = x.Date.ToString("yyyy-MM-dd"), revenue = x.Revenue })));

        function initializeCharts() {
            const orderCtx = document.getElementById('ordersChart').getContext('2d');
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');

            ordersChart = new Chart(orderCtx, {
                type: 'line',
                data: {
                    labels: orderData.map(d => d.date),
                    datasets: [{
                        label: 'Orders',
                        data: orderData.map(d => d.count),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            revenueChart = new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: revenueData.map(d => d.date),
                    datasets: [{
                        label: 'Revenue (€)',
                        data: revenueData.map(d => d.revenue),
                        borderColor: 'rgb(153, 102, 255)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function updateCharts(orderData, revenueData) {
            ordersChart.data.labels = orderData.map(d => d.date);
            ordersChart.data.datasets[0].data = orderData.map(d => d.count);
            ordersChart.update();

            revenueChart.data.labels = revenueData.map(d => d.date);
            revenueChart.data.datasets[0].data = revenueData.map(d => d.revenue);
            revenueChart.update();
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();

            // Handle date filter updates
            document.getElementById('updateStats').addEventListener('click', updateStatistics);

            // Handle period buttons
            document.querySelectorAll('[data-period]').forEach(button => {
                button.addEventListener('click', function() {
                    const days = parseInt(this.dataset.period);
                    const endDate = new Date();
                    const startDate = new Date();
                    startDate.setDate(endDate.getDate() - days);

                    document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
                    document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
                    updateStatistics();
                });
            });
        });

        function updateStatistics() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            fetch('/Home/UpdateStatistics', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ startDate, endDate })
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('totalOrders').textContent = data.totalOrders;
                document.getElementById('totalRevenue').textContent = `€${data.totalRevenue.toFixed(2)}`;
                document.getElementById('newCustomers').textContent = data.newCustomers;

                const orderData = data.dailyOrderCounts.map(x => ({ date: x.date.split('T')[0], count: x.count }));
                const revenueData = data.dailyRevenue.map(x => ({ date: x.date.split('T')[0], revenue: x.revenue }));
                
                updateCharts(orderData, revenueData);
            });
        }
    </script>
}