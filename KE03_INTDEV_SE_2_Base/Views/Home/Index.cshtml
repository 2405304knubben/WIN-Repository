@model KE03_INTDEV_SE_2_Base.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />

<div class="dashboard">
    <!-- Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card stats-card fade-in" style="cursor: pointer" onclick="window.location.href = '@Url.Action("Index", "Bestellingen")'">
                <div class="card-body">
                    <h5 class="card-title">Totale Bestellingen</h5>
                    <p class="card-text" id="totalOrders">@Model.TotalOrders</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card fade-in" style="cursor: pointer" onclick="window.location.href = '@Url.Action("Index", "Product")'">
                <div class="card-body">
                    <h5 class="card-title">Totale Omzet</h5>
                    <p class="card-text" id="totalRevenue">€@Model.TotalRevenue.ToString("N2")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card fade-in" style="cursor: pointer" onclick="window.location.href = '@Url.Action("Index", "Customers")'">
                <div class="card-body">
                    <h5 class="card-title">Totaal Aantal Klanten</h5>
                    <p class="card-text" id="totalCustomers">@Model.TotalCustomers</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Filter -->
    <div class="date-filter my-4">
        <div class="d-flex align-items-end gap-3 fade-in2 ">
            <div>
                <label for="startDate" class="form-label">Start Datum</label>
                <input type="date" id="startDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
            </div>
            <div>
                <label for="endDate" class="form-label">Eind Datum</label>
                <input type="date" id="endDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
            </div>
            <div>
                <button id="updateStats" class="btn btn-primary">Update</button>
            </div>
            <div class="ms-auto">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-secondary" data-period="7">Week</button>
                    <button type="button" class="btn btn-secondary" data-period="30">Maand</button>
                    <button type="button" class="btn btn-secondary" data-period="365">Jaar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card slide-in-left">
                <div class="card-body">
                    <h5 class="card-title">Dagelijkse Bestellingen</h5>
                    <canvas id="ordersChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card slide-in-right">
                <div class="card-body">
                    <h5 class="card-title">Dagelijkse Omzet</h5>
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let ordersChart;
        let revenueChart;

        // Parse the model data for charts
        const orderData = @Html.Raw(Json.Serialize(Model.DailyOrderCounts.Select(x => new { date = x.Date.ToString("yyyy-MM-dd"), count = x.Count })));
        const revenueData = @Html.Raw(Json.Serialize(Model.DailyRevenue.Select(x => new { date = x.Date.ToString("yyyy-MM-dd"), revenue = x.Revenue })));

        function initializeCharts() {
            const orderCtx = document.getElementById('ordersChart').getContext('2d');
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');

            ordersChart = new Chart(orderCtx, {
                type: 'line',
                data: {
                    labels: orderData.map(d => d.date),
                    datasets: [{
                        label: 'Bestellingen',
                        data: orderData.map(d => d.count),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            revenueChart = new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: revenueData.map(d => d.date),
                    datasets: [{
                        label: 'Omzet (€)',
                        data: revenueData.map(d => d.revenue),
                        borderColor: 'rgb(153, 102, 255)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function updateCharts(orderData, revenueData) {
            ordersChart.data.labels = orderData.map(d => d.date);
            ordersChart.data.datasets[0].data = orderData.map(d => d.count);
            ordersChart.update();

            revenueChart.data.labels = revenueData.map(d => d.date);
            revenueChart.data.datasets[0].data = revenueData.map(d => d.revenue);
            revenueChart.update();
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();

            // Voeg event listeners toe voor datum validatie
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const updateButton = document.getElementById('updateStats');

            // Stel maximum datum in op vandaag
            const today = new Date().toISOString().split('T')[0];
            startDateInput.max = today;
            endDateInput.max = today;

            function validateDates() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);
                const isValid = startDate <= endDate;

                updateButton.disabled = !isValid;
                
                if (!isValid) {
                    alert('De startdatum moet voor of gelijk zijn aan de einddatum');
                    return false;
                }
                return true;
            }

            // Valideer bij elke datum verandering
            startDateInput.addEventListener('change', validateDates);
            endDateInput.addEventListener('change', validateDates);

            // Update de updateStatistics functie om eerst te valideren
            const originalUpdateStats = updateStatistics;
            updateStatistics = function() {
                if (validateDates()) {
                    originalUpdateStats();
                }
            };

            // Handle date filter updates
            updateButton.addEventListener('click', updateStatistics);

            // Handle period buttons
            document.querySelectorAll('[data-period]').forEach(button => {
                button.addEventListener('click', function() {
                    const days = parseInt(this.dataset.period);
                    const endDate = new Date();
                    const startDate = new Date();
                    startDate.setDate(endDate.getDate() - days);

                    document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
                    document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
                    updateStatistics();
                });
            });
        });

        function updateStatistics() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            document.getElementById('updateStats').disabled = true;

            fetch('/Home/UpdateStatistics', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ startDate, endDate })
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    // Update statistics
                    document.getElementById('totalOrders').textContent = data.totalOrders;
                    document.getElementById('totalRevenue').textContent = `€${parseFloat(data.totalRevenue).toFixed(2)}`;
                    document.getElementById('totalCustomers').textContent = data.totalCustomers; // Gewijzigd van newCustomers naar totalCustomers

                    // Update charts only if we have valid data
                    if (Array.isArray(data.dailyOrderCounts) && Array.isArray(data.dailyRevenue)) {
                        const orderData = data.dailyOrderCounts
                            .filter(x => x && Object.keys(x).length > 0)  // Filter lege objecten
                            .map(x => {
                                console.log('Processing order item:', x);
                                return {
                                    date: x.Date ? x.Date.split('T')[0] : x.date ? x.date.split('T')[0] : '',
                                    count: x.Count || x.count || 0
                                };
                            })
                            .filter(x => x.date);

                        const revenueData = data.dailyRevenue
                            .filter(x => x && Object.keys(x).length > 0)  // Filter lege objecten
                            .map(x => {
                                console.log('Processing revenue item:', x);
                                return {
                                    date: x.Date ? x.Date.split('T')[0] : x.date ? x.date.split('T')[0] : '',
                                    revenue: x.Revenue || x.revenue || 0
                                };
                            })
                            .filter(x => x.date);

                        console.log('Final processed order data:', orderData);
                        console.log('Final processed revenue data:', revenueData);

                        if (orderData.length > 0 && revenueData.length > 0) {
                            updateCharts(orderData, revenueData);
                        } else {
                            console.warn('No valid data to update charts');
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Error updating statistics:', error);
                alert('Er is een fout opgetreden bij het ophalen van de statistieken.');
            })
            .finally(() => {
                document.getElementById('updateStats').disabled = false;
            });
        }
    </script>
}