@using KE03_INTDEV_SE_2_Base.ViewModels
@model List<VoorraadItemViewModel>

<video autoplay loop muted playsinline id="bg-video">
    <source src="/Videos/matrix.mp4" type="video/mp4">
    Your browser does not support the video tag.
</video>

<div class="container py-4">
    <div class="card matrix-card shadow mb-4">
        <div class="card-header bg-dark text-light p-3">
            <h5 class="mb-0">Voorraad Aanvullen</h5>
        </div>
        <div class="card-body p-4">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
            }

            <form asp-action="SubmitOrder" method="post" id="voorraadForm">
                @if (Model != null && Model.Any())
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Naam</th>
                                <th>Huidige Voorraad</th>
                                <th>Prijs p/s</th>
                                <th>Aantal Bijbestellen</th>
                                <th>Subtotaal</th>
                                <th>Actie</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr data-item-id="@item.Id" data-item-type="@item.Type">
                                    <td>@item.Type</td>
                                    <td>@item.Name</td>
                                    <td>@item.CurrentStock</td>
                                    <td>€@item.Price.ToString("N2")</td>
                                    <td>
                                        <input type="number" name="quantities[@item.Id]"
                                               class="form-control quantity-input" style="width: 100px;"
                                               value="@item.OrderAmount" min="1" required
                                               data-item-id="@item.Id" />
                                    </td>
                                    <td class="subtotal">€@((item.Price * item.OrderAmount).ToString("N2"))</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm remove-item" data-item-id="@item.Id">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="5" class="text-end"><strong>Totaal:</strong></td>
                                <td colspan="2" id="grandTotal">€@Model.Sum(i => i.Price * i.OrderAmount).ToString("N2")</td>
                            </tr>
                        </tfoot>
                    </table>

                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <a asp-controller="Voorraad" asp-action="Index" class="btn btn-primary">
                            <i class="fa-solid fa-plus"></i> Meer producten/onderdelen toevoegen
                        </a>
                        <button type="button" class="btn btn-success" onclick="showConfirmModal()">
                            <i class="fa-solid fa-check"></i> Voorraad Bijbestellen
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <p>Geen producten of onderdelen geselecteerd om bij te bestellen.</p>
                        <a asp-controller="Voorraad" asp-action="Index" class="btn btn-primary">
                            <i class="fa-solid fa-plus"></i> Producten/Onderdelen Selecteren
                        </a>
                    </div>
                }
            </form>
        </div>
    </div>
</div>

<!-- Bevestigingsmodal -->
<div class="modal fade" id="confirmOrderModal" tabindex="-1" aria-labelledby="confirmOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmOrderModalLabel">Bestelling Bevestigen</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Weet u zeker dat u deze bestelling wilt plaatsen?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuleren</button>
                <button type="button" class="btn btn-primary" onclick="document.getElementById('voorraadForm').submit();">Bevestig Bestelling</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Debounce function to limit the rate at which we make AJAX calls
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // Calculate subtotal for a row
            function calculateRowSubtotal(input) {
                const row = input.closest('tr');
                const price = parseFloat(row.querySelector('td:nth-child(4)').innerText.replace('€', '').replace(',', '.'));
                const quantity = parseInt(input.value) || 0;
                const subtotal = price * quantity;
                row.querySelector('.subtotal').innerText = `€${subtotal.toFixed(2)}`;
                calculateGrandTotal();
            }

            // Calculate grand total
            function calculateGrandTotal() {
                const subtotals = [...document.querySelectorAll('.subtotal')];
                const total = subtotals.reduce((sum, el) => {
                    return sum + parseFloat(el.innerText.replace('€', '').replace(',', '.'));
                }, 0);
                document.getElementById('grandTotal').innerText = `€${total.toFixed(2)}`;
            }

            // Handle quantity changes with debouncing
            const updateQuantity = debounce(async function(input) {
                const itemId = input.dataset.itemId;
                const amount = parseInt(input.value);
                
                try {
                    const response = await fetch('/Voorraad/UpdateAmount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            id: parseInt(itemId),
                            amount: amount
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    calculateRowSubtotal(input);
                } catch (error) {
                    console.error('Error updating quantity:', error);
                }
            }, 300);

            // Add event listeners to all quantity inputs
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('input', () => updateQuantity(input));
                calculateRowSubtotal(input);
            });

            // Handle remove item buttons
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', async function() {
                    const itemId = this.dataset.itemId;
                    try {
                        const response = await fetch('/Voorraad/RemoveItem', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                id: parseInt(itemId)
                            })
                        });

                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        // Remove the row from the table
                        this.closest('tr').remove();
                        calculateGrandTotal();

                        // If no items left, refresh the page
                        if (document.querySelectorAll('tbody tr').length === 0) {
                            window.location.reload();
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                    }
                });
            });
        });

        function showConfirmModal() {
            const modal = new bootstrap.Modal(document.getElementById('confirmOrderModal'));
            modal.show();
        }
    </script>
}